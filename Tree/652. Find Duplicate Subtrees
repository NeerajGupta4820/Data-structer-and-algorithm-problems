/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string solve(TreeNode* root,vector<TreeNode*>&v,unordered_map<string,int>&subtrees){
        if(!root) return "#";
        string left=solve(root->left,v,subtrees);
        string right=solve(root->right,v,subtrees);
        string temp=left+','+right+','+to_string(root->val);
        if(subtrees[temp]==1) v.push_back(root);
        subtrees[temp]++;
        return temp;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string,int>subtrees;
        vector<TreeNode*>v;
        solve(root,v,subtrees);
        return v;
    }
};
