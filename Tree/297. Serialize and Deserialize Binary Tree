/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "x,";
        return to_string(root->val)+","+serialize(root->left)+serialize(root->right);
    }
    // Decodes your encoded data to tree.
    TreeNode* solve(queue<string>&q){
        string temp=q.front();
        q.pop();
        if(temp=="x") return NULL;
        TreeNode* root=new TreeNode(stoi(temp));
        root->left=solve(q);
        root->right=solve(q);
        return root;
    }
    TreeNode* deserialize(string data) {
        queue<string>q;
        int size=data.size();
        string temp="";
        int i=0;
        while(i<size){
            if(data[i]!=',') temp+=data[i];
            else{
                q.push(temp);
                temp="";
            }
            i++;
        }
        return solve(q);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
