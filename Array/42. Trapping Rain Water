//first approch
class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        vector<int>lmax(n);
        vector<int>rmax(n);

        lmax[0]=height[0];
        rmax[n-1]=height[n-1];
        
        for(int i=1;i<n;i++){
            lmax[i]=max(height[i],lmax[i-1]);
        }

        for(int i=n-2;i>=0;i--){
            rmax[i]=max(height[i],rmax[i+1]);
        }
        
        int water=0;
        for(int i=0;i<n;i++){
            water+=(min(rmax[i],lmax[i])-height[i]);
        }
        return water;
    }
};

//best approach
class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int leftmax=0;
        int rightmax=0;
        int left=0;
        int right=n-1;
        int ans=0;
        while(left<right){
            if(height[left]>leftmax) leftmax=height[left];
            if(height[right]>rightmax) rightmax=height[right];
            
            if(leftmax<rightmax) {
                ans=ans+leftmax-height[left];
                left++;
            }
            else{
                ans=ans+rightmax-height[right];
                right--;
            }
        }
        return ans;
    }
};
