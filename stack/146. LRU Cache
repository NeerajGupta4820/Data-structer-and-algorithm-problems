class LRUCache {
public:
    unordered_map<int,list<pair<int,int>>::iterator>mp;
    list<pair<int,int>>lru;
    int n;
    LRUCache(int capacity) {
        n=capacity;
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end()){
            lru.splice(lru.end(),lru,mp.find(key)->second);
            return mp.find(key)->second->second;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()){
            lru.splice(lru.end(),lru,mp.find(key)->second);
            mp.find(key)->second->second=value;
            return ;
        }
        if(mp.size()>=n){
            mp.erase(mp.find(lru.begin()->first));
            lru.pop_front();
        }
        lru.push_back({key,value});
        list<pair<int,int>>::iterator lrui=lru.end();
        lrui--;
        mp[lrui->first]=lrui;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
