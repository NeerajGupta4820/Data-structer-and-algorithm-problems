//link of the problem : 

/******************************tabulation method***********************************/
class Solution {
	public:
		int LongestRepeatingSubsequence(string str){
		    int n=str.length();
		    int dp[n+1][n+1];  
		    for(int i=0;i<=n;i++){
		        for(int j=0;j<=n;j++){
		            if(i==0 or j==0){
		                dp[i][j]=0;
		            }
		            else if (str[i-1]==str[j-1] and i!=j) dp[i][j]=dp[i-1][j-1]+1;
		            else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		        }
		    }
		    return dp[n][n];
		}

};
/******************************space optimaization***********************************/
class Solution {
	public:
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    int n = str.size();
        vector<int> curr(n+1, 0);
        vector<int> prev(n+1, 0);
        
        for(int i = 1; i <= n; ++i) {
            for(int j = 1; j <= n; ++j) {
                if(str[i-1] == str[j-1] and i != j) {
                    curr[j] = 1 + prev[j-1];
                }
                else{
                    curr[j] = max(prev[j], curr[j-1]); 
                }
            }
            prev = curr;
        }
        
        
        return prev[n];
		}

};
