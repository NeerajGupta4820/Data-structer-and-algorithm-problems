//link of the problem: https://practice.geeksforgeeks.org/problems/optimal-strategy-for-a-game-1587115620/1


/**************************memeoization***********************************/
class Solution{
    public:
    long long  solve(int i,int j,int arr[],vector<vector<int>>&dp){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int a=arr[i]+min(solve(i+2,j,arr,dp),solve(i+1,j-1,arr,dp));
        int b=arr[j]+min(solve(i,j-2,arr,dp),solve(i+1,j-1,arr,dp));
        return dp[i][j]=max(a,b);
    }
    long long maximumAmount(int arr[], int n){
        // Your code here
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return solve(0,n-1,arr,dp);
    }
};

/*********************************tabulation*************************************/
class Solution{
    public:
    
    long long maximumAmount(int arr[], int n){
        // Your code here
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        for(int gap=0;gap<n;gap++){
            for(int i=0,j=gap;j<n;i++,j++){
                if(gap==0){
                    dp[i][j]=arr[i];
                }
                else if(gap==1){
                    dp[i][j]=max(arr[i],arr[j]);
                }
                else{
                    dp[i][j]=max(arr[i]+min(dp[i+2][j] , dp[i+1][j-1]) , arr[j]+min(dp[i+1][j-1], dp[i][j-2]));
                }
            }
        }
        return dp[0][n-1];
    }
};
