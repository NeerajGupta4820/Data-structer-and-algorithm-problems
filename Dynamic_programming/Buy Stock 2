//link of the problem : https://practice.geeksforgeeks.org/problems/buy-stock-2/1

/***************************tabultion metthod*********************************

class Solution{
    public:
    long long maximumProfit(vector<long long>&prices, int n) {
        // Code here
        vector<vector<long long>>dp(n+1, vector<long long>(2, 0));
        dp[n][0]=dp[n][1]=0;
        
        for(int i=n-1; i>=0; i--){
            for(int b=0; b<=1; b++){
                long long profit;
                if(b){
                    profit=max((-prices[i]+dp[i+1][0]), dp[i+1][1]);
                }else{
                    profit=max((prices[i]+dp[i+1][1]), dp[i+1][0]);
                }
                dp[i][b]=profit;
            }
        }
        long long ans=dp[0][1];
        return ans;
    }
};

/**************************************space complexity*********************************/
class Solution{
    public:
    long long maximumProfit(vector<long long>&prices, int n) {
        // Code here
        vector<long long>prev(2,0),curr(2,0);
        for(int i=n-1;i>=0;i--){
            for(int buy=0;buy<=1;buy++){
                long long profit;
                if(buy) profit=max((-prices[i]+prev[0]),prev[1]);
                else profit=max((prices[i]+prev[1]),prev[0]);
                curr[buy]=profit;
            }
            prev=curr;
        }
        return prev[1];
    }
};
