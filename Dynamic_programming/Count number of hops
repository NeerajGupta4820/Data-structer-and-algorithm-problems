//link of the problem: https://practice.geeksforgeeks.org/problems/count-number-of-hops-1587115620/1


/***********************************memoization method ************************************/

class Solution
{
    public:
    //Function to count the number of ways in which frog can reach the top.
    int mod=1e9+7;
    long long solve(int n,vector<long long>&dp){
        if(n<0) return 0;
        if(n==0)return 1;
        if(dp[n]!=-1 ) return dp[n];
        
        int ans=(solve(n-1,dp)+solve(n-2,dp)+solve(n-3,dp))%mod;
        return dp[n]=ans;
    }
    long long countWays(int n)
    {
        
        // your code here
        vector<long long >dp(n+1,-1);
        return  solve(n,dp);
        
    }
};

/**************************************tabulation method*********************************/
long long countWays(int n)
    {
        int mod = 1e9+7;
        vector <long long> dp(n+1);
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i{3}; i <= n; ++i)
        {
            dp[i] = (dp[i-1])%mod + (dp[i-2])%mod + (dp[i-3])%mod;
        }
        return dp[n]%mod;
    }
