//link of the problem : https://practice.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1



/************************************memoization*********************************/

class Solution{
public:
    int solve(int n,int  W,int val[],int wt[],int i,vector<vector<int>>& dp){
        if(i>=n) return 0;
        if(W<=0) return 0; 
        if(dp[i][W]!=-1)  return dp[i][W];
        if(wt[i]<=W) {
            int incl=val[i]+solve(n,W-wt[i],val,wt,i,dp);
            int excl=0+solve(n,W,val,wt,i+1,dp);
            return dp[i][W] = max(incl,excl);
        }
        else{
            return dp[i][W]=solve(n,W,val,wt,i+1,dp);
        }
    }
    int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
        vector<vector<int>>dp(N+1,vector<int>(W+1,-1));
        return solve(N,W,val,wt,0,dp);
        
    }
};


/*******************************tabulation************************************/
class Solution{
public:
    int knapSack(int N, int W, int val[], int wt[])
    {
        int dp[W+1];
        dp[0]=0;
        for(int bagc=1;bagc<=W;bagc++){
                int maxi=0;
            for(int i=0;i<N;i++){
                if(wt[i]<=bagc){
                    int rbagc=bagc-wt[i];
                    int rbagv=dp[rbagc];
                    int tbagv=rbagv+val[i];
                
                    maxi=max(maxi,tbagv);
                }
            }
            dp[bagc]=maxi;
        }
        return dp[W];
    }
};

