class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>visited(V,0);
        queue<pair<int,int>>q;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                q.push({i,-1});
                while(!q.empty()){
                    pair<int,int>front= q.front();
                    q.pop();
                    int node=front.first;
                    int parent=front.second;
                    visited[node] = 1;
                    for(auto &child:adj[node]){ 
                        if(!visited[child]){
                            q.push({child,node});
                        }
                        else if(child!=parent) return true;
                    }
                }
            }
        }    
        return false;
    }
};
