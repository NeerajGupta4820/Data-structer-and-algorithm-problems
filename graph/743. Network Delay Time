class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int, int>>> adj(n + 1);
        for (auto& time : times) {
            int u = time[0];
            int v = time[1]; 
            int w = time[2]; 
            adj[u].push_back({v, w});
        }

        vector<int> dist(n + 1, INT_MAX);
        dist[k]=0;
        queue<pair<int,int>>q;
        q.push({0,k});

        while(!q.empty()){
            int currtime=q.front().first;
            int node=q.front().second;
            q.pop();

            if(currtime>dist[node])continue;

            for(auto& nbr:adj[node]){
                int neighbor=nbr.first;
                int weight=nbr.second;

                if(dist[node]+weight<dist[neighbor]){
                    dist[neighbor]=dist[node]+weight;
                    q.push({dist[neighbor],neighbor});
                }
            }
        }
        int time=0;
        for(int i=1;i<dist.size();i++){
            if(dist[i]==INT_MAX) return -1;
            time=max(time,dist[i]);
        }
        return time;
    }
};
