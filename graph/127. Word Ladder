class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
          unordered_set<string>st(wordList.begin(),wordList.end());
          if(st.find(endWord)==st.end())  return 0;
          queue<pair<string,int>>q;
          q.push({beginWord,1});
          while(!q.empty()){
            auto [currword,count]=q.front();
            q.pop();
            for(int i=0;i<currword.length();i++){
                char originalchar=currword[i];
                for(char c='a';c<='z';c++){
                    if(c==currword[i]) continue;
                    currword[i]=c;
                    if(currword==endWord) return count+1;
                    if(st.find(currword)!=st.end()){
                        q.push({currword,count+1});
                        st.erase(currword);
                    }
                }
                currword[i]=originalchar;
            }
        }  
        return 0;
    }
};
